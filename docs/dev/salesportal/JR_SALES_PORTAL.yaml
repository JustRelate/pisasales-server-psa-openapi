openapi: 3.0.4

info:
  version: '8.3'
  title: Sales portal API
  description: |
    Endpoints to be used by the Scrivito sales portal.  
    All endpoints require an IAM authorization.  
    The header `Accept-Language` defines the language that is used for the request. 
    The value of the header is a language identifier like `en` or `en-US`.

paths:
  /salesportal/activity:
    get:
      summary: Fetch all activities
      description: Searches all activities. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - activity
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
        - name: contacts
          in: query
          description: Comma separated list of contact IDs. Finds all activities which are associated to the given contacts.
          example: DA8FA0F7483D467B905207A0CAB8D1DE
          schema:
            type: string
        - name: projects
          in: query
          description: Comma separated list of project IDs. Finds all activities which are associated to the given project.
          example: DA8FA0F7483D467B905207B0CAB8D1DE
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/activities'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new activity
      description: This will create a new activity
      tags:
        - activity
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The activity data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activity_writable'
      responses:
        '201':
          $ref: '#/components/responses/activity'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/activity/{id}:
    get:
      summary: Fetch a single activity
      description: Searches the _id of an activity
      tags:
        - activity
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/activity'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update an activity
      description: This will update an existing activity
      tags:
        - activity
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The activity data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activity_writable'
      responses:
        '200':
          $ref: '#/components/responses/activity'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete an activity
      description: Searches the _id of an activity and deletes the record
      tags:
        - activity
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The activity was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/address:
    get:
      summary: Get all addresses
      description: Returns a list of all addresses
      tags:
        - address
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/addresses'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create an address
      description: This will create a new address
      tags:
        - address
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The address data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address_writable'
      responses:
        '201':
          $ref: '#/components/responses/address'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/address/{id}:
    get:
      summary: Fetch a single address
      description: Searches the _id of an address
      tags:
        - address
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/address'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update an address
      description: This will update an existing address
      tags:
        - address
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The address data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address_writable'
      responses:
        '200':
          $ref: '#/components/responses/address'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete an address
      description: Searches the _id of an address and deletes the record
      tags:
        - address
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The address was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/binary-access-token/{id}:
    get:
      summary: Request a token for accessing binary data
      description: Returns an URL containing a token that is valid for a limited time and grants access to a single record
      tags:
        - binary-access
      parameters:
        - name: id
          in: path
          description: binary ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/binary-access-token'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/binary-access/{token}:
    get:
      summary: Get the binary data for an access token
      description: No IAM is needed for this endpoint
      tags:
        - binary-access
      parameters:
        - name: token
          in: path
          description: binary access token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: binary data
          content:
            application/octet-stream: 
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              schema:
                type: string
                description: MIME type
                example: image/jpg
            Content-Length:
              schema:
                type: integer
                description: Length in bytes
                example: 22192
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="screenshot.jpg"
        '401':
          description: the token is invalid or expired

  /salesportal/cockpit-element:
    get:
      summary: Fetch all available cockpit elements
      description: Searches all configured elements
      tags:
        - cockpit
      parameters:
        - $ref: '#/components/parameters/language_query'
        - name: type
          in: query
          description: Type of the cockpit
          example: sales
          schema:
            type: string
            enum: [sales, marketing, service]
      responses:
        '200':
          $ref: '#/components/responses/cockpit-elements'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/cockpit-element/{id}:
    get:
      summary: Fetch a single cockpit element
      description: Searches the _id of a cockpit element
      tags:
        - cockpit
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/cockpit-element'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/cockpit-data/{id}:
    get:
      summary: Fetch the data for a single cockpit element
      description: Searches the _id of a cockpit elementa and returns the element data
      tags:
        - cockpit
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
        - name: filter
          in: query
          description: ID of a filter to apply
          example: 0E790837E7584BA09138A407A3C0762B
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/cockpit-data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/company:
    get:
      summary: Fetch all companies
      description: Searches all companies. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - company
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
        - $ref: '#/components/parameters/contact_labels_query'
        - name: persons
          in: query
          description: Comma separated list of person IDs. Finds all companies which are associated to the given persons.
          example: DA8FA0F7483D467B905207A0CAB8D1DE
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/companies'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a company
      description: This will create a new company
      tags:
        - company
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The company data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company_writable'
      responses:
        '201':
          $ref: '#/components/responses/company'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/company/{id}:
    get:
      summary: Fetch a single company
      description: Searches the _id of a company
      tags:
        - company
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/company'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a company
      description: This will update an existing company
      tags:
        - company
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The company data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company_writable'
      responses:
        '200':
          $ref: '#/components/responses/company'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a company
      description: Searches the _id of a company and deletes the record
      tags:
        - company
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The company was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '409':
          description: The company could not be deleted due to a conflict        
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'relation.check_failed'
                  error:
                    type: string
                    example: 'relation count exceeds delete check'
                  details:
                    type: object
                    properties:
                      count:
                        type: string
                        example: '1'
                      relation:
                        type: string
                        example: 'Main company'

  /salesportal/contact:
    get:
      summary: Get all contacts
      description: Returns a list of all contacts
      tags:
        - contact
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/contacts'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/contact/{id}:
    get:
      summary: Get a single contact
      description: Returns contact data.
      tags:
        - contact
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/contact'
        '400':
          $ref: '#/components/responses/error_invalid_id'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/whoami:
    get:
      summary: Get the authenticated user
      description: Returns contact data of the user
      tags:
        - contact
      parameters:
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/whoami'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/document:
    get:
      summary: Get all defined documents
      description: Returns a list of documents
      tags: [document]
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/filter_query'
      responses:
        '200':
          $ref: '#/components/responses/documents'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a document
      description: This will create a new document
      tags: [document]
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The document data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document_upload'
      responses:
        '201':
          $ref: '#/components/responses/document'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/document/{id}:
    get:
      summary: Fetch a single document
      description: Searches the _id of an document
      tags: [document]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/document'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a document
      description: This will update an existing document
      tags: [document]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The document data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document_upload'
      responses:
        '200':
          $ref: '#/components/responses/document'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a document
      description: Searches the _id of an document and deletes the record
      tags: [document]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The document was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/filter:
    get:
      summary: Get filters
      description: Returns a list of filters that a are available for an entity and the current user
      tags: [filter]
      parameters:
        - name: entity
          in: query
          required: true
          description: Entity to get all filters for
          example: Ticket
          schema:
            type: string
            enum: [Activity, Company, Person, Opportunity, Quote, Order, Ticket, Document, List]
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - name: _search
          in: query
          description: Searches in the filter title. The search terms are connected with an AND.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/filters'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - description: The entity was not specified
                    type: object
                    properties:
                      code:
                        type: string
                        example: 'missing.data'
                      error:
                        type: string
                        example: 'Some data is missing'
                      details:
                        type: object
                        properties:
                          cause:
                            type: string
                            example: "query parameter 'entity' is missing or empty"
                  - description: The entity provided entity is not supported
                    type: object
                    properties:
                      code:
                        type: string
                        example: 'invalid.data'
                      error:
                        type: string
                        example: 'The provided data is invalid'
                      details:
                        type: object
                        properties:
                          entiy:
                            type: string
                            example: "Foobar"
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/filter/{id}:
    get:
      summary: Get single filter
      description: Returns the information for a single filter.
      tags: [filter]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/filter'
        '400':
          $ref: '#/components/responses/error_invalid_id'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a filter
      description: This will update an existing filter
      tags: [filter]
      parameters:
        - $ref: '#/components/parameters/id_path'
      requestBody:
        description: The filter data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filter_writable'
      responses:
        '200':
          $ref: '#/components/responses/filter'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/follow-up:
    post:
      summary: Create a new follow-up activity
      description: This will create a new activity that has another activity as origin
      tags: [activity]
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The activity data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/follow-up'
      responses:
        '201':
          $ref: '#/components/responses/activity'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/global-result:
    get:
      summary: A global full text search
      description: Searches all entites
      tags:
        - global-result
      parameters:
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
        - name: entity
          in: query
          description: Comma separated list of entities. This limits the search results to this entities.
          example: Person,Company
          schema:
            type: string
            enum: ['Activity', 'Person', 'Company', 'Ticket', 'Opportunity', 'Quote', 'Order', 'Document', 'List']
      responses:
        '200':
          $ref: '#/components/responses/global-results'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_data'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/industry:
    get:
      summary: Get all defined industries
      description: Returns a list of industries
      tags:
        - industry
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - name: _search
          in: query
          description: Search for the name of an industry
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/industries'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/industry/{id}:
    get:
      summary: Fetch a single industry
      description: Searches the _id of an industry
      tags:
        - industry
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/industry'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/lead:
    get:
      summary: Fetch all leads
      description: Searches all companies and persons of the group "Lead".
      tags:
        - lead
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
        - $ref: '#/components/parameters/contact_labels_query'
      responses:
        '200':
          $ref: '#/components/responses/leads'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a lead
      description: This will create a new lead
      tags:
        - lead
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The lead data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lead_writable'
      responses:
        '201':
          $ref: '#/components/responses/lead'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/lead/{id}:
    get:
      summary: Fetch a single lead
      description: Searches the _id of a lead
      tags:
        - lead
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/lead'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a lead
      description: This will update an existing lead
      tags:
        - lead
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The lead data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lead_writable'
      responses:
        '200':
          $ref: '#/components/responses/lead'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a lead
      description: Searches the _id of a lead and deletes the record
      tags:
        - lead
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The lead was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '409':
          description: The person could not be deleted due to a conflict        
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'relation.check_failed'
                  error:
                    type: string
                    example: 'relation count exceeds delete check'
                  details:
                    type: object
                    properties:
                      count:
                        type: string
                        example: '1'
                      relation:
                        type: string
                        example: 'quote'

  /salesportal/list:
    get:
      summary: Fetch all list
      description: Searches all contact lists. Additional queries can be set by simply adding the field name as query parameter.
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
      responses:
        '200':
          $ref: '#/components/responses/lists'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a  list
      description: This will create a new list
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The list data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list_writable'
      responses:
        '201':
          $ref: '#/components/responses/list'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/list/{id}:
    get:
      summary: Fetch a single list
      description: Searches the _id of a contact list
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/list'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a list
      description: This will update an existing contact list
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The list data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list_writable'
      responses:
        '200':
          $ref: '#/components/responses/list'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a list
      description: Searches the _id of a contact list and deletes the record
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The list was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/list-contact-status:
    get:
      summary: Fetch all contact status for a list
      description: Searches all status. Additional queries can be set by simply adding the field name as query parameter.
      tags: [list]
      parameters:
        - name: list
          in: query
          description: |
            ID of the list to get the contact status for.  
            (Either list or stanadrd is required)
          example: E2C5832E55A745C7AC11F0007DFA239A
          schema:
            type: string
        - name: standard
          in: query
          description: |
            If true, fetch only standard status and not the ones of a list.  
            (Either list or stanadrd is required)
          example: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/list-contact-statuses'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new contact status for a list
      description: This will create a new contact status
      tags: [list]
      parameters:
        - name: source
          in: query
          description: |
            ID of a list contact status that should be copied.  
            Attributes in the JSON payload will overwrite the data of the copy.  
            If the source is not set, a new status will be created.
          example: A681D80056294A33B0CFFDD0286050F2
          schema: 
            type: string
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The status data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-contact-status_writable'
      responses:
        '201':
          $ref: '#/components/responses/list-contact-status'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/list-contact-status/{id}:
    get:
      summary: Fetch a single contact status of a list
      description: Searches the _id of a contact status
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/list-contact-status'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a contact status of a list
      description: This will update an existing contact status
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The list data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-contact-status_writable'
      responses:
        '200':
          $ref: '#/components/responses/list-contact-status'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a contact status from a list
      description: Searches the _id of a contact status and deletes the record
      tags: [list]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The list was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '409':
          description: The status could not be deleted because it is used        
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'relation.check_failed'
                  details:
                    type: object
                    properties:
                      count:
                        type: string
                        example: '1'
                      title:
                        type: string
                        example: 'First contact'

  /salesportal/message:
    get:
      summary: Fetch all messages
      description: Searches all messages that belong to a certain object (like a project)
      tags:
        - message
      parameters:
        - name: subjectId
          in: query
          description: ID of the associated object (project or activity)
          required: true
          example: DDF8F474C125466DAB2A4937D5945E11
          schema:
            type: string
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/messages'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Post a new message
      description: Post a new message
      tags:
        - message
      requestBody:
        description: The message data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message_post'
      responses:
        '201':
          $ref: '#/components/responses/message'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
  /salesportal/message/{id}:
    get:
      summary: Fetch a single message
      description: Searches the _id of a message
      tags:
        - message
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '200':
          $ref: '#/components/responses/message'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
  
  /salesportal/opportunity:
    get:
      summary: Fetch all opportunities
      description: Searches all opportunities. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - opportunity
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
      responses:
        '200':
          $ref: '#/components/responses/opportunities'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create an opportunity
      description: This will create a new opportunity
      tags:
        - opportunity
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The opportunity data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opportunity_writable'
      responses:
        '201':
          $ref: '#/components/responses/opportunity'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/opportunity/{id}:
    get:
      summary: Fetch a single opportunity
      description: Searches the _id of an opportunity
      tags:
        - opportunity
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/opportunity'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update an opportunity
      description: This will update an existing opportunity
      tags:
        - opportunity
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The opportunity data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opportunity_writable'
      responses:
        '200':
          $ref: '#/components/responses/opportunity'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a quote
      description: Searches the _id of an quote and deletes the record
      tags:
        - opportunity
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The quote was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/order:
    get:
      summary: Fetch all orders
      description: Searches all orders. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - order
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
      responses:
        '200':
          $ref: '#/components/responses/orders'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create an order
      description: This will create a new order
      tags:
        - order
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The order data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_writable'
      responses:
        '201':
          $ref: '#/components/responses/order'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/order/{id}:
    get:
      summary: Fetch a single order
      description: Searches the _id of an order
      tags:
        - order
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/order'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update an order
      description: This will update an existing order
      tags:
        - order
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The order data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_writable'
      responses:
        '200':
          $ref: '#/components/responses/order'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete an order
      description: Searches the _id of an order and deletes the record
      tags:
        - order
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The order was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/person:
    get:
      summary: Fetch all persons
      description: Searches all persons. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - person
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
        - $ref: '#/components/parameters/contact_labels_query'
        - name: companies
          in: query
          description: Comma separated list of company IDs. Finds all persons which are associated to the given companies.
          example: 44AB4B88EBD34608B0E4A81C1DA1D85B
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/persons'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a person
      description: This will create a new person
      tags:
        - person
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The person data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person_writable'
      responses:
        '201':
          $ref: '#/components/responses/person'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/person/{id}:
    get:
      summary: Fetch a single person
      description: Searches the _id of a person
      tags:
        - person
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/person'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a person
      description: This will update an existing person
      tags:
        - person
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The person data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person_writable'
      responses:
        '200':
          $ref: '#/components/responses/person'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a person
      description: Searches the _id of a person and deletes the record
      tags:
        - person
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The person was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '409':
          description: The person could not be deleted due to a conflict        
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'relation.check_failed'
                  error:
                    type: string
                    example: 'relation count exceeds delete check'
                  details:
                    type: object
                    properties:
                      count:
                        type: string
                        example: '1'
                      relation:
                        type: string
                        example: 'quote'

  /salesportal/project:
    get:
      summary: Get all projects
      description: Returns a list of all projects
      tags:
        - project
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/projects'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/project/{id}:
    get:
      summary: Get a single project
      description: Returns project data.
      tags:
        - project
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/project'
        '400':
          $ref: '#/components/responses/error_invalid_id'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/questionnaire:
    get:
      summary: Fetch all questionnaires
      description: Searches all questionnaires. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - questionnaire
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - name: externalId
          in: query
          description: external ID. Find all questionnaires that refer to this external ID
          example: _CdFzNF3YlboTsec9L49
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/questionnaires'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new questionnaire
      description: This will create a new questionnaire
      tags:
        - questionnaire
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The questionnaire data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaire_writable'
      responses:
        '201':
          $ref: '#/components/responses/questionnaire'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/questionnaire/{id}:
    get:
      summary: Fetch a single questionnaire
      description: Searches the _id of a questionnaire
      tags:
        - questionnaire
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/questionnaire'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a questionnaire
      description: This will update an existing questionnaire
      tags:
        - questionnaire
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The questionnaire data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaire_writable'
      responses:
        '200':
          $ref: '#/components/responses/questionnaire'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/question:
    get:
      summary: Fetch all questions
      description: Searches all questions. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - question
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - name: externalId
          in: query
          description: external ID. Find all questions that refer to this external ID
          example: FZmouxAtG2vRf_EiF6yq
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/questions'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new question
      description: This will add a new question to a questionnaire
      tags:
        - question
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The question data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question_writable'
      responses:
        '201':
          $ref: '#/components/responses/question'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/question/{id}:
    get:
      summary: Fetch a single question
      description: Searches the _id of a question
      tags:
        - question
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/question'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a question
      description: This will update an existing question
      tags:
        - question
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The question data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question_writable'
      responses:
        '200':
          $ref: '#/components/responses/question'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a question
      description: Searches the _id of a question and deletes the record
      tags:
        - question
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The question was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/question-option:
    get:
      summary: Fetch all options of questions
      description: Searches all options. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - question-option
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - name: externalId
          in: query
          description: external ID. Find all questions that refer to this external ID
          example: FZmouxAtG2vRf_EiF6yq
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/question-options'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new option for a question question
      description: This will add a new option to a question
      tags:
        - question-option
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The option data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-option_writable'
      responses:
        '201':
          $ref: '#/components/responses/question-option'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/question-option/{id}:
    get:
      summary: Fetch a single option of a question
      description: Searches the _id of an option
      tags:
        - question-option
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/question-option'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update an option of a question
      description: This will update an existing option
      tags:
        - question-option
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The option data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-option_writable'
      responses:
        '200':
          $ref: '#/components/responses/question-option'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete an option of a question
      description: Searches the _id of an option and deletes the record
      tags:
        - question-option
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The option was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/questionnaire-answer/{id}:
    get:
      summary: Fetch a single questionnaire answer
      description: Searches the _id of an answer
      tags:
        - questionnaire-answer
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/questionnaire-answer'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/questionnaire-answer:
    get:
      summary: Fetch all questionnaire answers
      description: Searches all answers. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - questionnaire-answer
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/questionnaire-answers'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Submit a new set of questionnaire answers
      description: This will store the answers and run the actions based on the questionnaire configuration.
      tags:
        - questionnaire-answer
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The questionnaire data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaire-answer_post_request'
      responses:
        '200':
          $ref: '#/components/responses/questionnaire-answer_update'
        '201':
          $ref: '#/components/responses/questionnaire-answer_insert'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/quote:
    get:
      summary: Fetch all quotes
      description: Searches all quotes. Additional queries can be set by simply adding the field name as query parameter.
      tags:
        - quote
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
      responses:
        '200':
          $ref: '#/components/responses/quotes'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a quote
      description: This will create a new quote
      tags:
        - quote
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The quote data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quote_writable'
      responses:
        '201':
          $ref: '#/components/responses/quote'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/quote/{id}:
    get:
      summary: Fetch a single quote
      description: Searches the _id of an quote
      tags:
        - quote
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/quote'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a quote
      description: This will update an existing quote
      tags:
        - quote
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The quote data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quote_writable'
      responses:
        '200':
          $ref: '#/components/responses/quote'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a quote
      description: Searches the _id of an quote and deletes the record
      tags:
        - quote
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The quote was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/region:
    get:
      summary: Get all regions
      description: Returns a list of regions
      tags:
        - region
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - name: _search
          in: query
          description: Search for the name of a region
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/regions'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/region/{id}:
    get:
      summary: Fetch a single region
      description: Searches the _id of an region
      tags:
        - region
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/region'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/activity-contact:
    get:
      summary: Fetch all activity-contact-relations
      description: Searches all relations
      tags: [relation - activity-contact]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
        - name: _order
          in: query
          description: List of fields that should be used for ordering. Beside all fields of the response it can also contain the query parameter starting with activity_
          example: activity_beginAt.desc
          schema:
            type: string
        - name: agent
          in: query
          description: Will the request load client or agent relations. The default is false which means that client relations are loaded.
          example: 'false'
          schema:
            type: boolean
        - name: activity_search
          in: query
          description: Search for the subject of the activity
          example: Demonstration
          schema: 
            type: string
        - name: activity_createdAt
          in: query
          description: Search for the creation date of the activity
          example: 2025-02-03T15:11:58Z
          schema: 
            type: string
        - name: activity_updatedAt
          in: query
          description: Search for the update date of the activity
          example: 2025-02-03T15:11:58Z
          schema: 
            type: string
        - name: activity_beginAt
          in: query
          description: Search for the start of the activity
          example: 2025-02-03T15:11:58Z
          schema: 
            type: string
        - name: activity_endAt
          in: query
          description: Search for the end of the activity
          example: 2025-02-03T15:11:58Z
          schema: 
            type: string
        - name: activity_subject
          in: query
          description: Search for the subject of the activity
          example: Demonstration
          schema: 
            type: string
        - name: activity_type
          in: query
          description: Search for the type of the activity
          example: APPOINTMENT
          schema: 
            type: string
        - name: activity_subType
          in: query
          description: Search for the sub type of the activity
          example: DATE
          schema: 
            type: string
        - name: activity_status
          in: query
          description: Search for the status of the activity
          example: PSA_STA_APM_OPN
          schema: 
            type: string
        - name: activity_classification
          in: query
          description: Search for the classification of the activity
          example: PSA_ACT_CLA_PRO_SAL
          schema: 
            type: string
        - name: activity_open
          in: query
          description: Search for the open status of the activity
          example: true
          schema: 
            type: boolean
        - name: activity_priority
          in: query
          description: Search for the priority of the activity
          example: PSA_NRM
          schema: 
            type: string
        - name: activity_released
          in: query
          description: Is the activity planned and released?
          example: true
          schema:
            type: boolean
        - name: contact_search
          in: query
          description: Search for the name or emaila address of the contact
          example: John Doe
          schema: 
            type: string
        - name: contact_name
          in: query
          description: Search for the name of the contact
          example: John Doe
          schema: 
            type: string
        - name: contact_email
          in: query
          description: Search for the email address of the contact
          example: john.doe
          schema: 
            type: string
      responses:
        '200':
          $ref: '#/components/responses/activity-contacts'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new activity-contact-relation
      description: This will create a new relation between an activity and a contact (person or company)
      tags: [relation - activity-contact]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activity-contact_writable'
      responses:
        '201':
          $ref: '#/components/responses/activity-contact'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/activity-contact/{id}:
    get:
      summary: Fetch a activity-contact-relation
      description: Searches the _id of a relation
      tags: [relation - activity-contact]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/activity-contact'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete an activity-contact-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - activity-contact]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/activity-document:
    get:
      summary: Fetch all activity-document-relations
      description: Searches all relations
      tags: [relation - activity-document]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/activity-documents'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new activity-document-relation
      description: This will create a new relation between an activity and a document
      tags: [relation - activity-document]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activity-document_writable'
      responses:
        '201':
          $ref: '#/components/responses/activity-document'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/activity-document/{id}:
    get:
      summary: Fetch a activity-document-relation
      description: Searches the _id of a relation
      tags: [relation - activity-document]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/activity-document'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete an activity-document-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - activity-document]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/activity-project:
    get:
      summary: Fetch all activity-project-relations
      description: Searches all relations
      tags: [relation - activity-project]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/activity-projects'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new activity-project-relation
      description: This will create a new relation between a activity and a project
      tags: [relation - activity-project]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activity-project_writable'
      responses:
        '201':
          $ref: '#/components/responses/activity-project'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/activity-project/{id}:
    get:
      summary: Fetch a activity-project-relation
      description: Searches the _id of a relation
      tags: [relation - activity-project]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/activity-project'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a activity-project-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - activity-project]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/address-contact:
    get:
      summary: Fetch all address-contact-relations
      description: Searches all relations
      tags: [relation - address-contact]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/address-contacts'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new address-contact-relation
      description: This will create a new relation between an address and a contact
      tags: [relation - address-contact]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address-contact_writable'
      responses:
        '201':
          $ref: '#/components/responses/address-contact'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/address-contact/{id}:
    get:
      summary: Fetch a address-contact-relation
      description: Searches the _id of a relation
      tags: [relation - address-contact]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/address-contact'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a address-contact-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - address-contact]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/company-person:
    get:
      summary: Fetch all company-persons-relations
      description: Searches all employee relations
      tags: [relation - company-person]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
        - name: includeInactive
          in: query
          description: Will inactive persons be included in the result? The default is false.
          example: 'false'
          schema:
            type: boolean
        - name: _order
          in: query
          description: List of fields that should be used for ordering. Beside all fields of the response it can also contain the query parameter starting with person_
          example: person_name.asc
          schema:
            type: string
        - name: person_search
          in: query
          description: Search for the name or email address of the person
          example: John Doe
          schema: 
            type: string
        - name: person_name
          in: query
          description: Search for the name of the person
          example: John Doe
          schema: 
            type: string
        - name: person_email
          in: query
          description: Search for the email address of the person
          example: john.doe
          schema: 
            type: string
        - name: company_search
          in: query
          description: Search for the name or email address of the company
          example: ACME
          schema: 
            type: string
        - name: company_name
          in: query
          description: Search for the name of the company
          example: ACME
          schema: 
            type: string
        - name: company_email
          in: query
          description: Search for the email address of the company
          example: acme.com
          schema: 
            type: string
      responses:
        '200':
          $ref: '#/components/responses/company-persons'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new company-person-relation
      description: This will create a new relation between a company and a person (employee)
      tags: [relation - company-person]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company-person_writable'
      responses:
        '201':
          $ref: '#/components/responses/company-person'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/company-person/{id}:
    get:
      summary: Fetch a company-person-relation
      description: Searches the _id of a relation
      tags: [relation - company-person]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/company-person'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a company-person-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - company-person]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/contact-contact:
    get:
      summary: Fetch all contact-contact-relations
      description: Searches all relations
      tags: [relation - contact-contact]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
        - name: _order
          in: query
          description: List of fields that should be used for ordering. Beside all fields of the response it can also contain the query parameter starting with contact_
          example: contact_name.asc
          schema:
            type: string
        - name: contact_name
          in: query
          description: Search for the contact name
          example: A%
          schema: 
            type: string
        - name: contact_isExternal
          in: query
          description: Search if the contact is external or internal
          example: true
          schema: 
            type: boolean
        - name: contact_group
          in: query
          description: Search for the group of the contact
          example: PSA_ORG_LEA
          schema: 
            type: string
      responses:
        '200':
          $ref: '#/components/responses/contact-contacts'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new contact-contact-relation
      description: This will create a new relation between two contacts
      tags: [relation - contact-contact]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact-contact_writable'
      responses:
        '201':
          $ref: '#/components/responses/contact-contact'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/contact-contact/{id}:
    get:
      summary: Fetch a contact-contact-relation
      description: Searches the _id of a relation
      tags: [relation - contact-contact]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/contact-contact'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a contact-contact-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - contact-contact]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/contact-document:
    get:
      summary: Fetch all contact-document-relations
      description: Searches all relations
      tags: [relation - contact-document]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/contact-documents'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new contact-document-relation
      description: This will create a new relation between an contact and a document
      tags: [relation - contact-document]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact-document_writable'
      responses:
        '201':
          $ref: '#/components/responses/contact-document'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/contact-document/{id}:
    get:
      summary: Fetch a contact-document-relation
      description: Searches the _id of a relation
      tags: [relation - contact-document]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/contact-document'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete an contact-document-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - contact-document]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/contact-list:
    get:
      summary: Fetch all contact-list-relations
      description: Searches all relations
      tags: [relation - contact-list]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/order_query'
      responses:
        '200':
          $ref: '#/components/responses/contact-lists'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new contact-list-relation
      description: This will create a new relation between a contact and a list
      tags: [relation - contact-list]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact-list_writable'
      responses:
        '201':
          $ref: '#/components/responses/contact-list'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/contact-list/{id}:
    get:
      summary: Fetch a contact-list-relation
      description: Searches the _id of a relation
      tags: [relation - contact-list]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/contact-list'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a contact-list-relation
      description: This will update an existing company
      tags: [relation - contact-list]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact-list_writable'
      responses:
        '200':
          $ref: '#/components/responses/contact-list'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a contact-list-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - contact-list]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/contact-project:
    get:
      summary: Fetch all contact-project-relations
      description: Searches all relations
      tags: [relation - contact-project]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
        - name: _order
          in: query
          description: List of fields that should be used for ordering. Beside all fields of the response it can also contains the query parameter starting with project_
          example: project_createdAt.desc
          schema:
            type: string
        - name: project_search
          in: query
          description: Search for the keyword or number of a project
          example: Demo
          schema: 
            type: string
        - name: project_createdAt
          in: query
          description: Search for the creation date of the project
          example: 2025-02-03T15:11:58Z
          schema: 
            type: string
        - name: project_updatedAt
          in: query
          description: Search for the update date of a project
          example: 2025-02-03T15:11:58Z
          schema: 
            type: string
        - name: project_keyword
          in: query
          description: Search for the keyword of a project
          example: Demo
          schema: 
            type: string
        - name: project_number
          in: query
          description: Search for the number of a project
          example: CP-25-007247
          schema: 
            type: string 
        - name: project_status
          in: query
          description: Search for the status of a project
          example: PSA_SVC_CPL_ACQ
          schema: 
            type: string
        - name: project_type
          in: query
          description: Search for the type of a project
          example: PSA_SVC_CPL
          schema: 
            type: string
        - name: project_open
          in: query
          description: Search for an open status of a project
          example: true
          schema: 
            type: boolean
        - name: contact_search
          in: query
          description: Search for the name or email address of the contact
          example: john
          schema: 
            type: string
        - name: contact_name
          in: query
          description: Search for the contact name
          example: A%
          schema: 
            type: string
        - name: contact_email
          in: query
          description: Search for the email address of the contact
          example: acme.com
          schema: 
            type: string
      responses:
        '200':
          $ref: '#/components/responses/contact-projects'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new contact-project-relation
      description: This will create a new relation between a contact and a project
      tags: [relation - contact-project]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact-project_writable'
      responses:
        '201':
          $ref: '#/components/responses/contact-project'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/contact-project/{id}:
    get:
      summary: Fetch a contact-project-relation
      description: Searches the _id of a relation
      tags: [relation - contact-project]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/contact-project'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a contact-project-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - contact-project]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/document-document:
    get:
      summary: Fetch all document-document-relations
      description: Searches all relations
      tags: [relation - document-document]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/document-documents'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new document-document-relation
      description: This will create a new relation between two documents
      tags: [relation - document-document]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document-document_writable'
      responses:
        '201':
          $ref: '#/components/responses/document-document'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/document-document/{id}:
    get:
      summary: Fetch a document-document-relation
      description: Searches the _id of a relation
      tags: [relation - document-document]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/document-document'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a document-document-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - document-document]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/document-project:
    get:
      summary: Fetch all document-project-relations
      description: Searches all relations
      tags: [relation - document-project]
      parameters:
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/count_query'
      responses:
        '200':
          $ref: '#/components/responses/document-projects'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a new document-project-relation
      description: This will create a new relation between a project and a document
      tags: [relation - document-project]
      requestBody:
        description: The relation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/document-project_writable'
      responses:
        '201':
          $ref: '#/components/responses/document-project'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    
  /salesportal/document-project/{id}:
    get:
      summary: Fetch a document-project-relation
      description: Searches the _id of a relation
      tags: [relation - document-project]
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/document-project'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    delete:
      summary: Delete a document-project-relation
      description: Searches the _id of a relation and deletes the record
      tags: [relation - document-project]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The relation was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/schema:
    get:
      summary: Fetch schemas
      description: Returns the schema of all entities
      tags:
        - schema
      parameters:
        - name: name
          in: query
          description: Search for a single schema by name
          example: company
          schema:
            type: string
            enum:
              - activity
              - activity-contact
              - activity-document
              - activity-project
              - address
              - address-contact
              - cockpit-data
              - cockpit-element
              - company
              - company-person
              - contact
              - contact-contact
              - contact-document
              - contact-list
              - contact-project
              - document
              - document-document
              - document-project
              - filter
              - follow-up
              - global-result
              - industry
              - lead
              - list
              - message
              - opportunity
              - order
              - person
              - project
              - question
              - question-option
              - questionnaire
              - questionnaire-answer
              - quote
              - region
              - ticket
              - whoami
        - name: extended
          in: query
          description: Generate an extended schema. Mainly used for relational entities to include father and child attributes.
          example: 'false'
          schema:
            type: boolean
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/schema-list'
        '403':
          $ref: '#/components/responses/error_authentication_failed'

  /salesportal/ticket:
    get:
      summary: Get all tickets
      description: Returns a list of all tickets
      tags:
        - ticket
      parameters:
        - $ref: '#/components/parameters/ids_query'
        - $ref: '#/components/parameters/continuation_query'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/order_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/language_query'
        - $ref: '#/components/parameters/count_query'
        - $ref: '#/components/parameters/filter_query'
      responses:
        '200':
          $ref: '#/components/responses/tickets'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
    post:
      summary: Create a ticket
      description: This will create a new ticket
      tags:
        - ticket
      parameters:
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The ticket data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ticket_writable'
      responses:
        '201':
          $ref: '#/components/responses/ticket'
        '400':
          description: The submitted data had errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/error_invalid_id'
                  - $ref: '#/components/schemas/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'

  /salesportal/ticket/{id}:
    get:
      summary: Get a single ticket
      description: Returns ticket data.
      tags:
        - ticket
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      responses:
        '200':
          $ref: '#/components/responses/ticket'
        '400':
          $ref: '#/components/responses/error_invalid_id'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
    patch:
      summary: Update a ticket
      description: This will update an existing ticket
      tags:
        - ticket
      parameters:
        - $ref: '#/components/parameters/id_path'
        - $ref: '#/components/parameters/language_query'
      requestBody:
        description: The ticket data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ticket_writable'
      responses:
        '200':
          $ref: '#/components/responses/ticket'
        '400':
          $ref: '#/components/responses/error_missing_data'
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'
        '422':
          $ref: '#/components/responses/error_data_validation_failed'
    delete:
      summary: Delete a ticket
      description: Searches the _id of a ticket and deletes the record
      tags:
        - ticket
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '204':
          description: The ticket was deleted
        '403':
          $ref: '#/components/responses/error_authentication_failed'
        '404':
          $ref: '#/components/responses/error_record_not_found'

  /salesportal/version:
    get:
      summary: Get information about the server version
      description: Returns some of the relevant server versions
      tags:
        - version
      responses:
        '200':
          $ref: '#/components/responses/version'
      
  /salesportal/webhook/sync:
    post:
      summary: Endpoint for synchronizing data
      tags:
        - webhook
      responses:
        '204':
          description: no content

components:
  ########################################################################
  # parameters
  ########################################################################
  parameters:
    filter_query:
      in: query
      name: filter
      description: _id of a filter that will be used to set the queries
      example: ED6894AFC1F79870E030A8C00C01651B
      schema:
        type: string

    contact_labels_query:
      name: labels
      in: query
      description: |
        Filters for the label.  
        The label can be mandatory, included or excluded from the search result.  
        The default is to exclude duplicates and imported contacts (-duplicate,-imported).
      example: +imported
      schema:
        type: array
        items:
          type: string
          enum: [duplicate, +duplicate, -duplicate, imported, +imported, -imported]

    id_path:
      in: path
      name: id
      description: ID of the record
      required: true
      schema:
        type: string

    continuation_query:
      in: query
      name: _continuation
      description: Continuation key that was returned with the last result list
      schema:
        type: string

    search_query:
      in: query
      name: _search
      description: Full text (EUREKA) search term
      schema:
        type: string
        
    order_query:
      in: query
      name: _order
      description: List of fields that should be used for ordering
      example: createdAt.desc,name.asc
      schema:
        type: string
        
    limit_query:
      in: query
      name: _limit
      description: Maximum number of records to return. If the maximum is reached a continuation key will be in the response. The default value is 100.
      example: 10
      schema:
        type: number

    language_query:
      in: query
      name: _language
      description: Language to be used for the localized data fields (e.g. GER or ENG). Overwrites the Accept-Language header.
      example: GER
      schema:
        type: string

    count_query:
      in: query
      name: _count
      description: Count the total number of results available
      example: 'false'
      schema:
        type: boolean

    ids_query:
      in: query
      name: ids
      description: Search for multiple IDs. Values are separated by a comma
      example: 8065A97B2E1843E292CAAC1480EBAD84,F143C455A23E4A1B991D0DF2726755A6
      schema:
        type: string

  ########################################################################
  # responses
  ########################################################################
  responses:
    contact:
      description: contact data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact'

    contacts:
      description: a list of contacts
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contacts'
            
    whoami:
      description: current user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/whoami'

    company:
      description: company data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/company'

    companies:
      description: a list of companies
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/companies'

    document:
      description: document data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/document'

    documents:
      description: a list of documents
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/documents'

    document-project:
      description: document-project-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/document-project'

    document-projects:
      description: a list of document-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/document-projects'

    document-document:
      description: document-document-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/document-document'

    document-documents:
      description: a list of document-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/document-documents'

    person:
      description: person data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/person'

    persons:
      description: a list of persons
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/persons'

    lead:
      description: lead data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lead'

    leads:
      description: a list of leads
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/leads'

    list:
      description: contact list data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list'

    lists:
      description: a list of contact lists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lists'

    list-contact-status:
      description: contact status data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list-contact-status'

    list-contact-statuses:
      description: a list of contact statuses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list-contact-statuses'

    address:
      description: address data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/address'

    addresses:
      description: a list of addresses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/addresses'

    project:
      description: project data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project'

    projects:
      description: a list of projects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/projects'

    ticket:
      description: ticket data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ticket'

    tickets:
      description: a list of tickets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/tickets'

    opportunity:
      description: opportunity data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/opportunity'

    opportunities:
      description: a list of opportunities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/opportunities'

    quote:
      description: quote data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/quote'

    quotes:
      description: a list of quotes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/quotes'

    order:
      description: order data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order'

    orders:
      description: a list of orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/orders'

    activity:
      description: activity data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity'

    activities:
      description: a list of activities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activities'

    message:
      description: message data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/message'

    messages:
      description: a list of messages
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messages'

    questionnaire:
      description: questionnaire data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questionnaire'

    questionnaires:
      description: a list of questionnaires
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questionnaires'

    question:
      description: question data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/question'

    questions:
      description: a list of questions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questions'

    question-option:
      description: option data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/question-option'

    question-options:
      description: a list of question options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/question-options'

    questionnaire-answers:
      description: a list of questionnaire answers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questionnaire-answers'

    questionnaire-answer_insert:
      description: A new set of answers was created. The answers are returned as a list.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questionnaire-answer_post_response'

    questionnaire-answer_update:
      description: A set of answers was updated. The answers are returned as a list.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questionnaire-answer_post_response'

    questionnaire-answer:
      description: a questionnaire answer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/questionnaire-answer'

    cockpit-element:
      description: A cockpit element
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/cockpit-element'

    cockpit-elements:
      description: A list of cockpit element
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/cockpit-elements'

    cockpit-data:
      description: The data of a cockpit element
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/cockpit-data'
          
    activity-contacts:
      description: a list of activity-contact-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity-contacts'

    activity-contact:
      description: activity-contact-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity-contact'

    company-persons:
      description: a list of company-person-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/company-persons'

    company-person:
      description: company-person-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/company-person'

    address-contacts:
      description: a list of address-contact-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/address-contacts'

    address-contact:
      description: address-contact-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/address-contact'

    contact-contact:
      description: contact-contact-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-contact'

    contact-contacts:
      description: a list of contact-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-contacts'

    contact-document:
      description: contact-document-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-document'

    contact-documents:
      description: a list of contact-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-documents'

    contact-list:
      description: contact-list-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-list'

    contact-lists:
      description: a list of contact-list-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-lists'

    contact-project:
      description: contact-project-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-project'

    contact-projects:
      description: a list of contact-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contact-projects'

    activity-project:
      description: activity-project-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity-project'

    activity-projects:
      description: a list of activity-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity-projects'

    activity-document:
      description: activity-document-relation data for fetching
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity-document'

    activity-documents:
      description: a list of activity-project-relations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/activity-documents'

    filter:
      description: filter data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/filter'

    filters:
      description: a list of filters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/filters'

    global-results:
      description: a list of global search results
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/global-results'

    industry:
      description: industry data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/industry'

    industries:
      description: a list of industries
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/industries'

    region:
      description: region data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/region'

    regions:
      description: a list of regions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/regions'

    binary-access-token:
      description: token for accessing binary data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/binary-access-token'

    schema-list:
      description: a list of the schema for all entites
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/schema-list'

    version:
      description: server version
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/version'

    error_authentication_failed:
      description: The authentication has failed
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/error_user_unknown'
              - $ref: '#/components/schemas/error_user_locked'

    error_invalid_id:
      description: The authenticated IAM user was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_invalid_id'

    error_invalid_data:
      description: The provided data was not valid
      content:
        application/json:
          schema:
             $ref: '#/components/schemas/error_invalid_data'

    error_record_not_found:
      description: The record was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 'record.not_found'
              error:
                type: string
                example: 'The record was not found'
              details:
                type: object
                properties:
                  id:
                    type: string
                    example: 'XXX'

    error_missing_data:
      description: Not all necessary data was submitted by the client
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_missing_data'

    error_data_validation_failed:
      description: The provided data failed a validation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 'validation.failed'
              error:
                type: string
                example: The provided data failed a validation
              details:
                type: object
                properties:
                  cause:
                    type: string
                    example: data size too long for field!

  schemas:
    ########################################################################
    # objects
    ########################################################################
    object:
      type: object
      properties:
        _id:
          type: string
          description: identifier of the record
          example: F9BB0AAA22C947BAE030A8C00C015B91
  
    system_fields:
      type: object
      properties:
        updatedAt:
          type: string
          description: Date of the last update of this record
          example: 2024-10-15T09:47:44Z
        updatedBy:
            type: string
            description: contact id of the last person who has updated this record
            example: D1E9954702698E6BE030A8C029015B96
        createdAt:
          type: string
          description: Date when this record was created
          example: 2024-10-15T09:47:44Z
        createdBy:
          type: string
          description: contact id of the person who has created this record
          example: D1E9954702698E6BE030A8C029015B96

    contact:
      description: contact object
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/contact_attributes'
    
    contact_attributes:
      description: contact object
      type: object
      properties:
        name:
          type: string
          description: For a person the name consisting of given and family name. For a company the name.
          example: John Doe
        displayTitle:
          type: string
          description: Title of the contact. Mainly used for references and titles
          example: Doe, John (ACME Ltd)
        salutation:
          type: string
          description: identifier of the salutation of the person
          example: M
        givenName:
          type: string
          description: first name
          example: John
        familyName:
          type: string
          description: last name
          example: Doe
        email:
          type: string
          description: email address
          example: john.doe@acme.com
        position:
          type: string
          description: persons position inside of the organization
          example: Sales manager
        isPerson:
          type: boolean
          description: is the contact a person?
          example: true
        isExternal:
          type: boolean
          description: is the contact external?
          example: true
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX
        entity:
          type: string
          description: Object type that corresponds to an endpoint for more data
          enum: [Person, Company, Contact]
          example: Person
        image:
          description: Image of the user or the company logo
          $ref: '#/components/schemas/binary'
        imageThumbnail:
          description: Thumbnail of the contact image
          $ref: '#/components/schemas/binary'

    contacts:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/contact'

    whoami:
      type: object
      allOf:
        - $ref: '#/components/schemas/contact_attributes'
      properties:
        contactId:
          type: string
          description: ID of the contact
          example: 8B37B5EBB3664A8AB23D66A66B7A34C6

    contact_writable:
      type: object
      properties:
        accountManager:
          type: string
          description: Id of the account manager
          example: 5150FF4BF8774C36A59D57FE47C38B58
        since:
          type: string
          description: Date when the first contact with this contact was made
          example: 2020-04-01T08:00:00Z
        occasion:
          type: string
          description: Occasion of the first contact
          example: DXD Digital Experience Days
        phone:
          type: string
          description: Telephone number
          example: +49 30 23125641
        email:
          type: string
          description: Email address
          example: info@acme.org
        email2:
          type: string
          description: Second email address
          example: support@acme.org
        email3:
          type: string
          description: Third email address
          example: invoice@acme.org
        url:
          type: string
          description: Web site
          example: https://www.acme.org
        communicationLanguage:
          type: string
          description: Preferred language for the communication with this contact
          example: ENG
        description:
          type: string
          description: Description of the contact
          example: Awesome company
        statusInfo:
          type: string
          description: Information about the current status of the contact
          example: New customer

    company_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/contact_writable'
      properties:
        name:
          type: string
          description: The name of the company
          example: ACME Ltd.
        status:
          type: string
          description: The identifier of the current status
          example: PSA_ORG_CST_PRC
        industry:
          type: string
          description: Identifier of the main industry the company
          example: 22CBAA9FC1C544B39F735F893803CCC7
        region:
          type: string
          description: Identifier of the region where the company is located
          example: 6FB1542B8D354B55B43B60EBD479E762

    company:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/company_writable'
      properties:
        displayTitle:
          type: string
          description: Title of the company. Mainly used for references and titles
          example: ACME Ltd. (Berlin)
        number:
          type: string
          description: The internal number of the company
          example: C-20-000491
        group:
          type: string
          description: The identifier of the group
          example: PSA_ORG_CST
        isExternal:
          type: boolean
          description: is the contact external?
          example: true
        parent:
          type: string
          description: The id of the superordinated company
          example: DD0AB9752680C88BE030A8C029014E7E
        duplicateOf:
          type: string
          description: ID of a company that is the master in case this company is a duplicate
          example: 44AB4B88EBD34608B0E4A81C1DA1D85B
        labels:
          type: array
          description: A label for the company that for example show if the contact is a duplicate or of the status imported
          example: [duplicate]
          items:
            type: string            
            enum: [duplicate, imported]
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX
        image:
          description: Image or logo
          $ref: '#/components/schemas/binary'
        imageThumbnail:
          description: Thumbnail of the image
          $ref: '#/components/schemas/binary'

    companies:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/company'

    person_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/contact_writable'
      properties:
        salutation:
          type: string
          description: Salutation of the person
          example: M
        title:
          type: string
          description: Academic title
          example: PSA_DR
        givenName:
          type: string
          description: Given name
          example: John
        familyName:
          type: string
          description: Family name
          example: Doe
        additionalGivenName:
          type: string
          description: additional given name
          example: Jones
        nameSuffix:
          type: string
          description: Name suffix
          example: jr.
        status:
          type: string
          description: The identifier of the current status
          example: PSA_PRS_CST_PRC

    person:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/person_writable'
      properties:
        name:
          type: string
          description: Composed name (given name + family name)
          example: John Doe
        displayTitle:
          type: string
          description: Title of the person. Mainly used for references and titles
          example: Doe, John (ACME Ltd)
        number:
          type: string
          description: The internal number of the person
          example: C-20-000491
        group:
          type: string
          description: The identifier of the group
          example: PSA_PRS_CST
        isExternal:
          type: boolean
          description: is the contact external?
          example: true
        parent:
          type: string
          description: The id of the superordinated company
          example: DD0AB9752680C88BE030A8C029014E7E
        duplicateOf:
          type: string
          description: ID of a person that is the master in case this person is a duplicate
          example: 44AB4B88EBD34608B0E4A81C1DA1D85B
        labels:
          type: array
          description: A label for the person that for example show if the contact is a duplicate or of the status imported
          example: [duplicate]
          items:
            type: string            
            enum: [duplicate, imported]
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX
        image:
          description: Image of the person
          $ref: '#/components/schemas/binary'
        imageThumbnail:
          description: Thumbnail of the image
          $ref: '#/components/schemas/binary'

    persons:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/person'

    lead_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/contact_writable'
      properties:
        isPerson:
          type: boolean
          description: Is the lead a person? During creation this defines if the lead is a person or a company.
          example: true
        status:
          type: string
          description: The identifier of the current status. During an insert this overwrites the isPerson flag.
          example: NQU

    lead:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/lead_writable'
      properties:
        name:
          type: string
          description: Composed name (given name + family name or company name)
          example: John Doe
        displayTitle:
          type: string
          description: Title of the lead. Mainly used for references and titles
          example: Doe, John (ACME Ltd)
        number:
          type: string
          description: The internal number of the lead
          example: C-20-000491
        group:
          type: string
          description: The identifier of the group
          example: PSA_PRS_LEA
        parent:
          type: string
          description: The id of the superordinated company
          example: DD0AB9752680C88BE030A8C029014E7E
        duplicateOf:
          type: string
          description: ID of a lead that is the master in case this lead is a duplicate
          example: 44AB4B88EBD34608B0E4A81C1DA1D85B
        labels:
          type: array
          description: A label for the lead that for example show if the contact is a duplicate or of the status imported
          example: [duplicate]
          items:
            type: string            
            enum: [duplicate, imported]
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX
        image:
          description: Image of the person
          $ref: '#/components/schemas/binary'
        imageThumbnail:
          description: Thumbnail of the image
          $ref: '#/components/schemas/binary'

    leads:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/lead'

    list_writable:
      type: object
      properties:
        title:
          type: string
          description: title of the list
          example: New leads
        status:
          type: string
          description: ID of the lists current status
          example: PSA_PRO_CMP_WRK
        type:
          type: string
          description: ID of the projects current status
          example: PSA_CMP_STY_STD
        responsible:
          type: string
          description: ID of the responsible person
          example: 2634A10A901B454B8A7B406572E81A2E
        beginAt:
          type: string
          description: ISO formatted date string of the start date
          example: 2025-04-29T12:32:31Z
        endAt:
          type: string
          description: ISO formatted date string of the end date
          example: 2025-04-29T12:32:31Z

    list:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/list_writable'
      properties:
        displayTitle:
          type: string
          description: title of the list
          example: New leads
        number:
          type: string
          description: number of the list
          example: P-25-000123
        open:
          type: boolean
          description: Is the list currently in an open status?
          example: true
        description:
          type: string
          description: Description of the list
          example: Enrich the contact data

    lists:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/list'

    list-contact-status_writable:
      type: object
      properties:
        list:
          type: string
          description: ID of the associated list
          example: E1E8843793DF465DAB403C1233151725
        title:
          type: string
          description: Title of the status
          example: First contact
        position:
          type: integer
          description: Position used for ordering the status
          example: 10
        target:
          type: integer
          description: Targeted number of contacts with this status
          example: 30
        progress:
          type: integer
          description: Degree of completion for this contact
          example: 10
        open:
          type: boolean
          description: Is this status considered open/active?
          example: true

    list-contact-status:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/list-contact-status_writable'
      properties:
        standard:
          type: boolean
          description: Is this status a standard status? If false it is a list specific status.
          example: false

    list-contact-statuses:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/list-contact-status'

    documents:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/document'

    document:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/document_writable'
      properties:
        displayTitle:
          type: string
          description: title of the document
          example: Quote 2024-01-01
        number:
          type: string
          description: document number
          example: D-24-005632
        format:
          type: string
          description: file format
          example: pdf
        size:
          type: number
          description: size in MB
          example: 0.52
        body:
          description: Binary data of the document
          $ref: '#/components/schemas/binary'

    document_upload:
      type: object
      allOf:
        - $ref: '#/components/schemas/document_writable'
      properties:
        body:
          description: binary data of this document
          $ref: '#/components/schemas/binary-upload'

    document_writable:
      properties:
        title:
          type: string
          description: title of the document
          example: Quote 2024-01-01
        type:
          type: string
          description: identifier of the type of the document
          example: PSA_OFF
        folder:
          type: boolean
          description: Is this document a folder? (Only writbale on insert.)
          example: false
        language:
          type: string
          description: identifier of the language of the document
          example: GER
        version:
          type: string
          description: version and revision
          example: '1.0'
        status:
          type: string
          description: Status of the document
          enum: [PSA_DOC_EDT, PSA_DOC_DEV, PSA_DOC_RLS, PSA_DOC_CLS, PSA_DOC_ARC, PSA_DOC_DIR_ACT, PSA_DOC_DIR_INA]
          example: PSA_DOC_RLS
        validFrom:
          type: string
          description: Document is valid starting with this date
          example: 2025-01-01T01:00:00Z
        validUntil:
          type: string
          description: Document is isvalid starting with this date
          example: 2025-03-31T21:59:59Z
        author:
          type: string
          description: Author of the document
          example: 24C6B4911BED02B4E040A8C00F0107F6
        comment:
          type: string
          description: Comment about the document
          example: First draft

    document-document:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/document-document_writable'

    document-document_writable:
      type: object
      properties:
        father:
          type: string
          description: ID of the associated father document
          example: 1E3039CE384EF294E040A8C00F0177E3
        child:
          type: string
          description: ID of the associated child document
          example: 76C0CDEDBF034E288E645E393D6D78DE

    document-documents:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/document-document'

    document-project:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/document-project_writable'
      properties:
        projectType:
          type: string
          description: Type of the project. Defines the endpoint to fetch for more information.
          enum: [Project, Ticket, Opportunity, Quote, Order]
          example: Order

    document-project_writable:
      type: object
      properties:
        project:
          type: string
          description: ID of the associated project
          example: AF9AB468B8FE4E7AA760CCA2F58EB6A9
        document:
          type: string
          description: ID of the associated document
          example: 76C0CDEDBF034E288E645E393D6D78DE

    document-projects:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/document-project'

    address_writable:
      description: address object
      type: object
      properties:
        type:
          type: string
          description: address type
          enum: [MAIN_ADDRESS, PRIVAT, DELIVERY_ADDRESS, VISIT_ADDRESS, INVOICE_ADDRESS, CORRESPONDENCE, OTHER]
          example: MAIN_ADDRESS
        street:
          type: string
          description: Street and house number
          example: Bundesallee 1
        postalCode:
          type: string
          description: Postal code
          example: '14050'
        city:
          type: string
          description: City
          example: Berlin
        country:
          type: string
          description: Country identifier
          example: DEU
        poBox:
          type: string
          description: P.O. box
        poBoxPostalCode:
          type: string
          description: P.O. box postal code
        postOffice:
          type: string
          description: Post office
        region:
          type: string
          description: county / federal state / department / province
        subRegion:
          type: string
          description: county / area
        latitude:
          type: number
          description: Latitude of the address
          example: 52.432650
        longitude:
          type: number
          description: Longitude of the address
          example: 13.373550

    address:
      description: address object
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/address_writable'

    addresses:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/address'

    industry:
      description: industry object
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        name:
          type: string
          description: Name of the industry
          example: Manufacture of metal forming machinery and machine tools
        displayTitle:
          type: string
          description: Name of the industry
          example: Manufacture of metal forming machinery and machine tools

    industries:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/industry'

    region:
      description: region object
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        name:
          type: string
          description: Name of the region
          example: North Germany
        displayTitle:
          type: string
          description: Name of the region
          example: North Germany
        key:
          type: string
          description: Key used to identify the region (human readable)
          example: GER-N
        country:
          type: string
          description: Country identifier
          example: DEU
        geoCode:
          type: string
          description: Geo code to define this region (NUTS or FIPS)
          example: DE3
        postalCode:
          type: string
          description: Postal code to define this region
          example: 12-14
        parent:
          type: string
          description: The id of the superordinated region
          example: 9E4C2C5A8C47454FB7A42EF3C57DE81E

    regions:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/region'

    project_writable:
      type: object
      properties:
        keyword:
          type: string
          description: Keyword of the project
          example: Filling line

    project:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/project_writable'
      properties:
        displayTitle:
          type: string
          description: Title of the project. Mainly used for references and titles
          example: Filling line
        number:
          type: string
          description: Number of the project
          example: P-24-000615
        entity:
          type: string
          description: Object type that corresponds to an endpoint for more data
          enum: [Project, Opportunity, Quote, Order, Ticket]
          example: Quote
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX

    projects:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/project'

    ticket_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/project_writable'
      properties:
        type:
          type: string
          description: 'Type of the ticket'
          example: PSA_SVC_CAL
        status:
          type: string
          description: 'Status'
          example: PSA_SVC_CAL_ACQ
        dueAt:
          type: string
          description: Date when the ticket should be closed
          example: 2024-12-11T15:46:34Z
        description:
          type: string
          description: Description of the ticket/problem
          example: It is not working
        referenceNumber:
          type: string
          description: Customer reference number
          example: '#12345'
        responsibleAgent:
          type: string
          description: ID of the responsible person
          example: F0EC0D64556846A48D988781DEA397A0
        customer:
          type: string
          description: ID of the customer
          example: 8FDDFCC964044F189A09F7ACEA157F98
        submittedBy:
          type: string
          description: Free text who has submitted this ticket
          example: John Doe
        submittedAt:
          type: string
          description: Date when the ticket was submitted
          example: 2024-12-11T15:46:34Z
        origin:
          type: string
          description: Medium that was used to submit this ticket
          example: PSA_SVC_ORI_TYP_PRT
        troubleArea:
          type: string
          description: Trouble area
          example: PSA_FAQ_TYP_11
        troubleType:
          type: string
          description: Trouble type
          example: PSA_FAQ_TY2_11
        process:
          type: string
          description: Affected process
          example: PSA_AFF_PRC_PRO
        customerExpectation:
          type: string
          description: Customer expectation
          example: PSA_CST_EXP_REP
        activity:
          type: string
          description: Activity
          example: PSA_MSR_TYP_10
        priority: 
          type: string
          description: Priority
          example: PSA_PRO_PRI_NRM

    ticket:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/ticket_writable'
      properties:
        displayTitle:
          type: string
          description: Title of the ticket. Mainly used for references and titles
          example: Filling line
        number:
          type: string
          description: Number of the ticket
          example: CP-19-006640
        statusAt:
          type: string
          description: Date when the current status was set
          example: 2024-12-11T15:46:34Z
        open:
          type: boolean
          description: Is the ticket currently in an open status?
          example: true
        openSince:
          type: integer
          description: Number of days the ticket is open
          example: 15
        statusInformation:
          type: string
          description: Status information
          example: Solution was sent to the customer 
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX

    tickets:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/ticket'

    salesproject_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/project_writable'
      properties:
        type:
          type: string
          description: Identifier of the sub type of the project
          example: PSA_QUO_STY_STD
        customer:
          type: string
          description: ID of the customer
          example: 52C3DFF6E44B45448CF8C2ECB55E3400
        commercialAgent:
          type: string
          description: ID of the commercial agent
          example: CD2B46B28C944FA2B5CE6BF3B5402E64
        technicalAgent:
          type: string
          description: ID of the technical agent
          example: F8635575DA604488981AECFB2B871ED5
        salesPartner:
          type: string
          description: ID of the sales partner for this project
          example: 191C336104A44A9484A045325D2DC21D
        status:
          type: string
          description: ID of the projects current status
          example: PSA_PRO_QUO_CPE
        opportunityAt:
          type: string
          description: ISO formatted date string of the opportunity date
          example: 2024-07-17T12:00:45Z
        quoteAt:
          type: string
          description: ISO formatted date string of the quote date
          example: 2024-07-17T12:00:45Z
        orderAt:
          type: string
          description: ISO formatted date string of the order date
          example: 2024-07-17T12:00:45Z
        deliveryAt:
          type: string
          description: ISO formatted date string of the order delivery date
          example: 2024-07-17T12:00:45Z
        termsOfDelivery:
          type: string
          description: ID of the agreed terms of delivery
          example: RFC_TOD_CFR
        termsOfPayment:
          type: string
          description: ID the agreed terms of payment
          example: PSA_TOP_10
        totalPrice:
          type: number
          description: Total price of the project
          example: 100499
        weightedPrice:
          type: number
          description: total price weighted with the go and get probability
          example: 48239.52
        goProbability:
          type: number
          description: probability in percent that the project will start
          example: 80
        getProbability:
          type: number
          description: probability in percent that we will win the project
          example: 60
        statusInformation:
          type: string
          description: Status information
          example: Very promising
        description:
          type: string
          description: Description of the project
          example: New variant
        url:
          type: string
          description: URL of the project
          example: https://www.tynacoon.com

    salesproject_readonly:
      type: object
      properties:
        displayTitle:
          type: string
          description: Title of the project. Mainly used for references and titles
          example: Filling line
        number:
          type: string
          description: Number of the project
          example: P-24-000615
        mainStatus:
          type: string
          description: ID of the projects main status
          example: PSA_SAP_MAI_QUO_QUO_GEN
        open:
          type: boolean
          description: Is the project currently in an open status?
          example: true
        totalPriceCurrency:
          type: string
          description: ISO 4217 code of the currency
          example: EUR
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX

    opportunity_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/salesproject_writable'

    opportunity:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/salesproject_readonly'
        - $ref: '#/components/schemas/opportunity_writable'

    opportunities:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/opportunity'

    quote_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/salesproject_writable'
      properties:
        validUntil:
          type: string
          description: ISO formatted date string until when the quote is valid
          example: 2024-07-30T12:00:00Z

    quote:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/salesproject_readonly'
        - $ref: '#/components/schemas/quote_writable'

    quotes:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/quote'

    order_writable:
      type: object
      allOf:
        - $ref: '#/components/schemas/salesproject_writable'

    order:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/salesproject_readonly'
        - $ref: '#/components/schemas/quote_writable'

    orders:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/order'

    activity_writable:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the activity
          example: Sales meeting
        beginAt:
          type: string
          description: ISO formatted date string of the starting time
          example: 2024-07-18T11:39:35Z
        endAt:
          type: string
          description: ISO formatted date string of the ending time
          example: 2024-07-18T11:39:35Z
        agent:
          type: string
          description: ID of the responsible person
          example: F6BB015098FA45DB959CE19E482B593F
        location:
          type: string
          description: Location of the activity/appointment
          example: Convention center
        status:
          type: string
          description: ID of the activity status
          example: PSA_STA_APM_AGR
        subType:
            type: string
            description: ID of the activity sub type
            example: EVENT
        priority:
          type: string
          description: ID of the priority
          example: PSA_NRM
        note:
          type: string
          description: Notes made for the activity
          example: Strategy meeting for the next release
        classification:
          type: string
          description: ID of the main classification of the activity
          example: PSA_ACT_CLA_PRO_SAL
        additionalClassifications:
          type: array
          description: IDs of the additional classifications of the activity
          example: [PSA_ACT_CLA_CST_COM]
          items:
            type: string

    activity:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/activity_writable'
      properties:
        type:
          type: string
          description: ID of the activity type
          example: APPOINTMENT
        displayTitle:
          type: string
          description: Title of the activity. Mainly used for references and titles
          example: Sales meeting
        open:
          type: boolean
          description: Is the activity currently in an open status?
          example: true
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX
        origin:
          type: string
          description: Id of the origin activity (if this is a follow-up activity)
          example: E0E88DE2032844B2B51495F046FD3FE1
        released:
          type: string
          description: Is the activity planned and released?
          example: true
        persons:
          type: array
          description: A list of IDs with the associated persons
          items:
            $ref: '#/components/schemas/activity-contact_contact'
        companies:
          type: array
          description: A list of IDs with the associated companies
          items:
            $ref: '#/components/schemas/activity-contact_contact'

    activities:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/activity'

    follow-up:
      type: object
      allOf:
        - $ref: '#/components/schemas/activity_writable'
      required:
        - origin
        - subject
        - subType
      properties:
        origin:
          type: string
          description: Id of the origin activity (if this is a follow-up activity)
          example: E0E88DE2032844B2B51495F046FD3FE1

    message_writable:
      type: object
      properties:
        subjectId:
          type: string
          description: reference to the object (project or activity)
          example: DDF8F474C125466DAB2A4937D5945E11
        text:
          type: string
          description: text of the message
          example: Hello world
        public:
          type: boolean
          description: Is this message visible to everyone?
          example: false
          
    message:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/message_writable'
      properties:
        createdAt:
          type: string
          description: Date when this message was created
          example: 2024-12-17T13:41:19Z
        createdBy:
          type: string
          description: contact id of the person who has created this contact
          example: 16A156C204D74BDAAEE1EC98BCBF242A
        attachments:
          type: array
          description: Files that were attached to this message
          items:
            $ref: '#/components/schemas/binary'

    message_post:
      type: object
      allOf:
        - $ref: '#/components/schemas/message_writable'
      required:
        - text
        - subjectId
      properties:
        attachments:
          type: array
          description: Files to attach to this message
          items:
            $ref: '#/components/schemas/binary-upload'

    messages:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/message'

    questionnaire_writable:
      type: object
      properties:
        title:
          type: string
          description: Title of the questionnaire
          example: Fair report
        externalId:
          type: string
          description: External identifier used by external systems to find the questionnaire later
          example: _CdFzNF3YlboTsec9L49
        inputType:
          type: string
          enum: [PSA_QST_INP_TYP_ONC_UPD, PSA_QST_INP_TYP_ONC, PSA_QST_INP_TYP_REP]
          description: >
            Mode of the questionnaire how data is entered:
              * PSA_QST_INP_TYP_ONC - Only one answer is store. The answer can not be changed.
              * PSA_QST_INP_TYP_ONC_UPD - Only one is stored. The answer can be changed later.
              * PSA_QST_INP_TYP_REP - Multiple answers can be stored. Each individual answer can not be changed.
          example: PSA_QST_INP_TYP_ONC_UPD
        status:
          type: string
          description: Identifier of the questionnaire status
          example: PSA_QST_ACT
        forms:
          type: boolean
          description: Are the questionnaire forms created? In case of an insert or update this value will create or delete the forms.
          example: true
        origin:
          type: string
          description: Origin of this questionnaire (who has created it)
          example: Scrivito questionnaire builder

    questionnaire:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/questionnaire_writable'
      properties:
        pisaSalesLink:
          type: string
          description: Object link to the record in PisaSales
          example: https://crm.pisasales.com/psaobj?title=Tynacoon&rpsids=42&login=xb64xKBsb&psacbk=cHNhb2JqPX

    questionnaires:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/questionnaire'

    question_writable:
      type: object
      properties:
        questionnaireId:
          type: string
          description: ID of the associated questionnaire
          example: 235B8FF32DEA4A3AA83783BBD67A3C6F
        externalId:
          type: string
          description: External identifier used by external systems to find the question later
          example: FZmouxAtG2vRf_EiF6yq
        type:
          type: string
          enum: [string_single_line, string_multi_line, string_dropdown, string_radio, string_checkboxes, floating_point, date_time, date, integer, logic, logic_tristate]
          description: >
            The data type and format the question:
              * string_single_line - A single line string
              * string_multi_line - A multi line string
              * string_dropdown - A string with a drop down selector
              * string_radio - A string with a radio selector
              * string_checkboxes - A string with a radio selector
              * floating_point - A floating point number
              * date_time - A date with day the time (UTC formatted - yyyy-MM-ddTHH:mm:ssZ)
              * date - A date with only the day (UTC formatted with the time fix at 12:00:00)
              * integer -  An integer type
              * logic - A boolean type (true / false)
              * logic_tristate - A boolean type with a third unset state (true / false / unset)
          example: string_single_line
        text:
          type: string
          description: question text
          example: Your name
        help:
          type: string
          description: Question help
          example: Given and family name
        position:
          type: integer
          description: Position number. Used to sort the questions
          example: 10
        identifier:
          type: string
          description: Identifier
          example: NAME
        defaultValue:
          type: string
          description: Default value for the answer
          example: John Doe
        mandatory:
          type: boolean
          description: Is this question mandatory?
          example: false

    question:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/question_writable'

    questions:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/question'

    question-option_writable:
      type: object
      properties:
        questionId:
          type: string
          description: ID of the associated question
          example: 206C110F3A6449B994129AA19AA6F99C
        position:
          type: integer
          description: Position number used for ordering the options of a question
          example: 10
        text:
          type: string
          description: Text
          example: Send me more information
        identifier:
          type: string
          description: Unique identifier. Mainly used within actions
          example: MORE_INFORMATION
        externalId:
          type: string
          description: External ID
          example: Xfm_324572538

    question-option:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/question-option_writable'

    question-options:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/question-option'

    questionnaire-answer_post_request:
      type: object
      properties:
        keys:
          type: object
          properties:
            activityId:
              type: string
              description: ID of the associated activity
              example: 80B60D3878DF49478964A10BFA21E490
            contactId:
              type: string
              description: ID of the associated contact
              example: 9F25DE367EF14AD3B4AF89C006B6C6D2
            projectId:
              type: string
              description: ID of the associated project
              example: B426C482890B4A02B039ABE3C55D6573
        data:
          type: array
          items:
            $ref: '#/components/schemas/questionnaire-answer_writable'

    questionnaire-answer_post_response:
      type: object
      properties:
        _id:
          type: string
          description: identifier that is the number of the answer set
          example: 4711
        data:
          type: array
          items:
            $ref: '#/components/schemas/questionnaire-answer'

    questionnaire-answer_writable:
      type: object
      properties:
        questionId:
          type: string
          description: ID of the associated question
          example: 206C110F3A6449B994129AA19AA6F99C
        updatedAt:
          type: string
          description: Last date when the answer was changed. (Optional)
          example: 2025-01-10T10:53:51Z
        value:
          type: array
          description: Text of the answer. May be a comma separated list if multiple options were selected.
          example: ['Send me news']
          items:
            type: string
        valueIdentifier:
          type: array
          description: An identifier of the answer. May be a comma separated list if multiple options were selected.
          example: ['NEWS']
          items:
            type: string

    questionnaire-answer:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/questionnaire-answer_writable'
      properties:
        questionnaireId:
          type: string
          description: ID of the associated questionnaire
          example: 55A2A83EFD7940E191B8DEC345424F7D
        activityId:
          type: string
          description: ID of the associated activity
          example: 80B60D3878DF49478964A10BFA21E490
        contactId:
          type: string
          description: ID of the associated contact
          example: 9F25DE367EF14AD3B4AF89C006B6C6D2
        projectId:
          type: string
          description: ID of the associated project
          example: B426C482890B4A02B039ABE3C55D6573
        number:
          type: integer
          description: number that groups multiple answers that bolong together
          example: 817

    questionnaire-answers:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/questionnaire-answer'
        
    cockpit-element:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        element:
          type: string
          description: Name of the cockpit element
          example: Pending quotes
        title:
          type: string
          description: Title of the cockpit element
          example: Pending quotes in the current month
        type:
          type: string
          description: The type of the cockpit
          enum: [sales, marketing, service, user]
          example: sales
        group:
          type: string
          description: Title of the group this element is in
          example: Current trading
        style:
          type: string
          description: The style of the element (list or diagram)
          enum: [diagram, list]
          example: diagram

    cockpit-elements:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/cockpit-element'

    cockpit-data:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        MET_DAT:
          type: array
          description: meta data
          items:
            type: object
            properties:
              TTL:
                type: string
                description: element title
                example: Open quotes
              SUB_TTL:
                type: string
                description: element sub title
                example: 'Total: 128.346 €'
        CRT_DAT:
          type: array
          description: chart data
          items:
            type: object
            additionalProperties:
              type: string
        RAW_DAT:
          type: array
          description: pre formatted raw data
          example: ['2023 - 1000 €', '2024 - 1400 €']
          items:
            type: string
        LIS_DAT:
          type: array
          description: Data for a list element
          items:
            type: object
            properties:
              DAT:
                type: array
                description: Cell data
                example: ['2023', '1000 €']
                items:
                  type: string
              LNK:
                type: array
                description: optional deep link for each cell
                example: ['http://']
                items:
                  type: string
              STY:
                description: style for this row
                $ref: '#/components/schemas/cockpit-style'

    cockpit-style:
      type: object
      properties:
        FNT:
          type: string
          description: 'Font style. Multiple styles are separated by a comma. Possible styles: bold,italic,underlined,stroke'
          example: bold
        BGC:
          type: string
          description: background color
          example: '#888888'
        FGC:
          type: string
          description: foreground color
          example: '#A0000000'

    activity-contacts:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/activity-contact'

    activity-contact:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/activity-contact_writable'
      properties:
        contactType:
          type: string
          description: Type of the contact.  Defines the endpoint to fetch for more information.
          enum: [Person, Company, Contact]
          example: Person

    activity-contact_writable:
      type: object
      properties:
        activity:
          type: string
          description: ID of the associated activity
          example: 8830238D81214394A18D65DFEE655ADB
        contact:
          type: string
          description: ID of the associated contact
          example: 862166B3FFEE4D30B45B4EC63FFEE78B
        email:
          type: string
          description: email address of the contact specific to this relation
          example: foo@bar.com
        role:
          type: string
          description: the role of the contact for this activity
          example: CON_ACT_NCO
        status:
          type: string
          description: the status of the contact for this activity
          example: PSA_ACT_CON_STA_ACC

    activity-contact_contact:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        contact:
          type: string
          description: ID of the associated contact
          example: 862166B3FFEE4D30B45B4EC63FFEE78B

    company-persons:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/company-person'

    company-person:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/company-person_writable'

    company-person_writable:
      type: object
      properties:
        company:
          type: string
          description: ID of the associated company
          example: 8830238D81214394A18D65DFEE655ADB
        person:
          type: string
          description: ID of the associated person
          example: 862166B3FFEE4D30B45B4EC63FFEE78B
        position:
          type: string
          description: Position in the assigned company
          example: CEO

    company-person_company:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        company:
          type: string
          description: ID of the associated company
          example: 862166B3FFEE4D30B45B4EC63FFEE78B

    address-contacts:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/address-contact'

    address-contact:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/address-contact_writable'

    address-contact_writable:
      type: object
      properties:
        address:
          type: string
          description: ID of the associated address
          example: C249361A232A4E8F859A13593B9D6440
        contact:
          type: string
          description: ID of the associated contact
          example: 21F28013E5A24B85BEEF56C8A2423898

    contact-contact:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/contact-contact_writable'
      properties:
        contactType:
          type: string
          description: Type of the contact. Defines the endpoint to fetch for more information.
          enum: [Contact, Person, Company]
          example: Company

    contact-contact_writable:
      type: object
      properties:
        father:
          type: string
          description: ID of the associated father contact
          example: E7EA38DA7F1140839FE0A0CD07189C11
        contact:
          type: string
          description: ID of the associated contact
          example: 941EE7F739604A948A7FE1BBE10F4855
        role:
          type: string
          description: role of the contact
          example: CON_CON_REL_CPT
        note:
          type: string
          description: note for this relation
          example: Some text...

    contact-contacts:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/contact-contact'

    contact-document:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/contact-document_writable'
      properties:
        contactType:
          type: string
          description: Type of the contact.  Defines the endpoint to fetch for more information.
          enum: [Person, Company, Contact]
          example: Person

    contact-document_writable:
      type: object
      properties:
        contact:
          type: string
          description: ID of the associated contact
          example: 21F28013E5A24B85BEEF56C8A2423898
        document:
          type: string
          description: ID of the associated document
          example: 76C0CDEDBF034E288E645E393D6D78DE

    contact-documents:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/contact-document'

    contact-project:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/contact-project_writable'
      properties:
        projectType:
          type: string
          description: Type of the project. Defines the endpoint to fetch for more information.
          enum: [Project, Ticket, Opportunity, Quote, Order]
          example: Order
        contactType:
          type: string
          description: Type of the contact. Defines the endpoint to fetch for more information.
          enum: [Contact, Person, Company]
          example: Person

    contact-project_writable:
      type: object
      properties:
        contact:
          type: string
          description: ID of the associated contact
          example: 8830238D81214394A18D65DFEE655ADB
        project:
          type: string
          description: ID of the associated project
          example: 812B6D2BC220411B8F177974AB50F468
        role:
          type: string
          description: enum identifier of the contacts role in the project
          example: COM_PRS

    contact-projects:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/contact-project'

    contact-list:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/contact-list_writable'
      properties:
        contactType:
          type: string
          description: Type of the contact. Defines the endpoint to fetch for more information.
          enum: [Contact, Person, Company]
          example: Person

    contact-list_writable:
      type: object
      properties:
        contact:
          type: string
          description: ID of the associated contact
          example: 8830238D81214394A18D65DFEE655ADB
        list:
          type: string
          description: ID of the associated list
          example: 812B6D2BC220411B8F177974AB50F468
        status:
          type: string
          description: ID of the relation status
          example: 49A74CCDDBA047A6A6D20444FEEEED5B

    contact-lists:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/contact-list'

    activity-project:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/activity-project_writable'
      properties:
        projectType:
          type: string
          description: Type of the project. Defines the endpoint to fetch for more information.
          enum: [Project, Ticket, Opportunity, Quote, Order]
          example: Order

    activity-project_writable:
      type: object
      properties:
        activity:
          type: string
          description: ID of the associated activity
          example: 5C660CA5A362411F8C4FFF384C0B411E
        project:
          type: string
          description: ID of the associated project
          example: 812B6D2BC220411B8F177974AB50F468

    activity-projects:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/activity-project'

    activity-document:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/system_fields'
        - $ref: '#/components/schemas/activity-document_writable'

    activity-document_writable:
      type: object
      properties:
        activity:
          type: string
          description: ID of the associated activity
          example: 5C660CA5A362411F8C4FFF384C0B411E
        document:
          type: string
          description: ID of the associated document
          example: 76C0CDEDBF034E288E645E393D6D78DE

    activity-documents:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/activity-document'

    binary-access-token:
      type: object
      properties:
        accessToken:
          type: string
          description: URL for accessing the binary data
          example: /binary-access/1649cff06611a6025da3dd511a97fb4328ABC5BC362145C0A6F308F116C6A7A5
        maxAge:
          type: integer
          description: time in seconds how long the token is valid
          example: 3600

    global-result:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        title:
          type: string
          description: Title of the found record
          example: Tynacoon GmbH
        displayTitle:
          type: string
          description: Title of the search result. Mainly used for references and titles
          example: Tynacoon GmbH
        entity:
          type: string
          description: End point to query for more details
          example: company
        snippet:
          type: string
          description: Text around the searched terms
          example: Tynacoon GmbH - Customer - C-20-0028947
        matches:
          type: array
          description: Starting an ending index of the matches. The starting index is included, the ending is excluded.
          example: [[0,8]]
          items:
            type: array
            items:
              type: integer

    global-results:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/global-result'

    filter:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/filter_writable'
      properties:
        title:
          type: string
          description: Title of the filter
          example: My tickets
        entity:
          type: string
          description: Entity this filter is defined for
          enum: [Activity, Company, Person, Opportunity, Quote, Order, Ticket, Document, List]
          example: Ticket

    filters:
      type: object
      properties:
        continuation:
          type: string
          description: key that is used to fetch the next result page
        count:
          type: integer
          description: the total number of results
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/filter'

    filter_writable:
      type: object
      properties:
        favorite:
          type: boolean
          description: Is this filter a favorite of the user?
          example: false

    schema-list:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/schema'

    schema:
      type: object
      allOf:
        - $ref: '#/components/schemas/object'
      properties:
        name:
          type: string
          description: The name of the group
          example: company
        displayTitle:
          type: string
          description: Title of the schema. Mainly used for references and titles
          example: company
        general:
          type: object
          properties:
            title:
              type: string
              example: Organization
            icon: 
              type: string
              example: ''
            groupOrder:
              type: array
              example: ["base", "additional"]
              items:
                type: string
        groups:
          type: object
          additionalProperties:
            type: object
            properties:
              title:
                type: string
                example: Base data
              attributeOrder:
                type: array
                example: ["name", "email"]
                items:
                  type: string
        attributes:
          type: object
          additionalProperties:
            type: object
            properties:
              type:
                type: string
                example: string
              referenceTo:
                type: string
                example: Company
              enumValues:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: string
                      example: IDENTIFIER_001
                    title: 
                      type: string
                      example: Value 1
                    constraints:
                      type: object
                      additionalProperties:
                        type: array
                        items:
                          type: string
              referenceFilter:
                  type: object
                  description: attributes and the query to be used when listing elements of the referenced object
                  additionalProperties:
                    type: string
              maxLength:
                type: integer
                example: 32
              mandatory:
                type: boolean
                example: false
              readonly:
                type: boolean
                example: false

    binary:
      type: object
      properties:
        _id:
          type: string
          description: Identifier that is used to request a binary access token
          example: c231fa48df3ee393c92dccac4dba5e7dE308ED22299D449C97DB6B7642FA2CA9
        filename:
          type: string
          description: filename
          example: screenshot1.jpg
        contentType:
          type: string
          description: MIME type
          example: image/jpg
        contentLength:
          type: integer
          description: estimated size of the binary data in bytes
          example: 245120

    binary-upload:
      type: object
      properties:
        filename:
          type: string
          description: file name of the uploaded binary data
          example: text.txt
        dataBase64:
          type: string
          description: Base64 encoded data
          example: SGVsbG8gd29ybGQ=

    version:
      type: object
      properties:
        server_version:
          type: string
          description: Version of the server
          example: '08.03-20241115'
        server_patch:
          type: string
          description: Current patch level of the server
          example: '02'
        rest_api_version:
          type: string
          description: Version of the REST API jar
          example: '1.2.2'
        rest_api_patch:
          type: string
          description: Current patch level of the REST API jar
          example: '49'
        dxhub_version:
          type: string
          description: Version of the DXHub jar
          example: '1.1.3'
        dxhub_patch:
          type: string
          description: Current patch level of the DXHub jar
          example: '7'

    ########################################################################
    # errors
    ########################################################################

    error_user_unknown:
      description: The authenticated IAM user was not found
      type: object
      properties:
        code:
          type: string
          example: 'user.unknown'
        error:
          type: string
          example: 'The user was not found'
        details:
          type: object
          properties:
            email:
              type: string
              example: 'john.doe@acme.org'

    error_user_locked:
      description: The authenticated IAM user is not allowed to login because the contact is locked
      type: object
      properties:
        code:
          type: string
          example: 'user.locked'
        error:
          type: string
          example: 'The user is locked'
        details:
          type: object
          properties:
            email:
              type: string
              example: 'john.doe@acme.org'
            status:
              type: string
              description: identifier of the current status
              example: PSA_PRS_LEA_BLC

    error_invalid_id:
      description: The authenticated IAM user was not found
      type: object
      properties:
        code:
          type: string
          example: 'invalid.id'
        error:
          type: string
          example: 'The ID is invalid'
        details:
          type: object
          properties:
            id:
              type: string
              example: 'XXX'

    error_invalid_data:
      description: The provided data was not valid
      type: object
      properties:
        code:
          type: string
          example: 'invalid.data'
        error:
          type: string
          example: The provided data is invalid
        details:
          type: object
          properties:
            field:
              type: string
              example: 'D07C1943E1929F83E030A8C0290112EB'

    error_missing_data:
      description: Not all necessary data was submitted by the client
      type: object
      properties:
        code:
          type: string
          example: 'missing.data'
        error:
          type: string
          example: 'Some data is missing'
        details:
          type: object
          properties:
            field:
              type: string
              description: name of the missing field
              example: 'title'
